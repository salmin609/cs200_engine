/************************************************
 *NAME              : sangmin.kim
 *ASSIGNMENT NUMBER : 1
 *COURSE NAME       : CS230
 *TERM              : Spring 2019
 ************************************************/
#include "stdafx.h"
#include "vector2.hpp"
#include <cassert>
#include <limits>

vector2::vector2() noexcept
{
    //No Sean is the best
    x = 0.0f;
    y = 0.0f;
};
vector2::vector2(float repeated_float) noexcept
{
    x = repeated_float;
    y = repeated_float;
};
vector2::vector2(float fx, float fy) noexcept
{
    x = fx;
    y = fy;
};

template <typename T>
void operator+=(T& v, const T& adding_vector) noexcept
{
    v.x += adding_vector.x;
    v.y += adding_vector.y;
}

template <typename T>
void operator-=(T& v, const T& subtracting_vector) noexcept
{
    v.x -= subtracting_vector.x;
    v.y -= subtracting_vector.y;
}

template <typename T1, typename T2>
void operator*=(T1& v, T2 scale) noexcept
{
    v.x *= scale;
    v.y *= scale;
}

template <typename T1, typename T2>
void operator/=(T1& v, T2 divisor) noexcept
{
    assert(divisor != 0);
    v.x /= divisor;
    v.y /= divisor;
}

template <typename T>
T operator-(const T& v) noexcept
{
    T result_vec;
    result_vec.x = -(v.x);
    result_vec.y = -(v.y);

    return result_vec;
}

template <typename T>
T operator+(const T& v1, const T& v2) noexcept
{
    T result_vec;
    result_vec.x = v1.x + v2.x;
    result_vec.y = v1.y + v2.y;

    return result_vec;
}

template <typename T>
vector2 operator-(const T& v1, const T& v2) noexcept
{
    vector2 result_vec;
    v2.x > v1.x ? result_vec.x = v2.x - v1.x : result_vec.x = v1.x - v2.x;
    v2.y > v1.y ? result_vec.y = v2.y - v1.y : result_vec.y = v1.y - v2.y;

    return result_vec;
}

template <typename T1, typename T2>
vector2 operator*(const T1& v, T2 scale) noexcept
{
    vector2 result_vec;
    result_vec.x = v.x * scale;
    result_vec.y = v.y * scale;

    return result_vec;
}

template <typename T1, typename T2>
vector2 operator*(T1 scale, const T2& v) noexcept
{
    vector2 result_vec;
    result_vec.x = v.x * scale;
    result_vec.y = v.y * scale;

    return result_vec;
}

template <typename T1, typename T2>
vector2 operator/(const T1& v, T2 divisor) noexcept
{
    assert(divisor != 0);

    vector2 result_vec;
    result_vec.x = v.x / divisor;
    result_vec.y = v.y / divisor;

    return result_vec;
}

template <typename T>
bool operator==(const T& v1, const T& v2) noexcept
{
    if (std::abs(v1.x - v2.x) <= std::numeric_limits<float>::epsilon() &&
        std::abs(v1.y - v2.y) <= std::numeric_limits<float>::epsilon())
    {
        return true;
    }
    else
        return false;
}

template <typename T>
bool operator!=(const T& v1, const T& v2) noexcept
{
    if (std::abs(v1.x - v2.x) <= std::numeric_limits<float>::epsilon() &&
        std::abs(v1.y - v2.y) <= std::numeric_limits<float>::epsilon())
    {
        return false;
    }
    else
        return true;
}


template <typename T>
float dot(T a, T b) noexcept
{
    float dot_product = 0.0f;

    dot_product += (a.x * b.x);
    dot_product += (a.y * b.y);

    return dot_product;
}

template <typename T>
vector2 perpendicular_to(T a) noexcept
{
    vector2 result_vec;
    result_vec.x = -(a.y);
    result_vec.y = a.x;

    return result_vec;
}
float magnitude_squared(vector2 a) noexcept
{
    float magnitude_val_squared = 0.0f;

    magnitude_val_squared += dot(a, a);

    return magnitude_val_squared;
}
float magnitude(vector2 a) noexcept
{
    float magnitude_val = 0.0f;

    magnitude_val = sqrt(dot(a, a));

    return magnitude_val;
}
vector2 normalize(vector2 a) noexcept
{
    vector2 result_vec;
    float   magnitude_val = 0.0f;

    magnitude_val = magnitude(a);
    result_vec.x = a.x / magnitude_val;
    result_vec.y = a.y / magnitude_val;

    return result_vec;
}
float distance_between_squared(vector2 a, vector2 b) noexcept
{